

coordonnes_cases= [[[-70, -70, 6], [-50, -70, 6], [-70, -50, 6], [-50, -50, 6], 'scan'], 
                    [[-50, -70, 6], [-30, -70, 6], [-50, -50, 6], [-30, -50, 6], 'evit'], 
                    [[-30, -70, 6], [-10, -70, 6], [-30, -50, 6], [-10, -50, 6], 'scan'],
                    [[-10, -70, 6], [10, -70, 6], [-10, -50, 6], [10, -50, 6], 'evit'],
                    [[10, -70, 6], [30, -70, 6], [10, -50, 6], [30, -50, 6], 'scan'], 
                    [[30, -70, 6], [50, -70, 6], [30, -50, 6], [50, -50, 6], 'evit'], 
                    [[50, -70, 6], [70, -70, 6], [50, -50, 6], [70, -50, 6], 'scan'], 
                    [[70, -70, 6], [90, -70, 6], [70, -50, 6], [90, -50, 6], 'scan'], 
                    [[-70, -50, 6], [-50, -50, 6], [-70, -30, 6], [-50, -30, 6], 'scan'], 
                    [[-50, -50, 6], [-30, -50, 6], [-50, -30, 6], [-30, -30, 6], 'evit'], 
                    [[-30, -50, 6], [-10, -50, 6], [-30, -30, 6], [-10, -30, 6], 'scan'], 
                    [[-10, -50, 6], [10, -50, 6], [-10, -30, 6], [10, -30, 6], 'scan'], 
                    [[10, -50, 6], [30, -50, 6], [10, -30, 6], [30, -30, 6], 'scan'], 
                    [[30, -50, 6], [50, -50, 6], [30, -30, 6], [50, -30, 6], 'evit'], 
                    [[50, -50, 6], [70, -50, 6], [50, -30, 6], [70, -30, 6], 'scan'], 
                    [[70, -50, 6], [90, -50, 6], [70, -30, 6], [90, -30, 6], 'scan'], 
                    [[-70, -30, 6], [-50, -30, 6], [-70, -10, 6], [-50, -10, 6], 'scan'], 
                    [[-50, -30, 6], [-30, -30, 6], [-50, -10, 6], [-30, -10, 6], 'scan'], 
                    [[-30, -30, 6], [-10, -30, 6], [-30, -10, 6], [-10, -10, 6], 'evit'], 
                    [[-10, -30, 6], [10, -30, 6], [-10, -10, 6], [10, -10, 6], 'scan'], 
                    [[10, -30, 6], [30, -30, 6], [10, -10, 6], [30, -10, 6], 'evit'], 
                    [[30, -30, 6], [50, -30, 6], [30, -10, 6], [50, -10, 6], 'scan'], 
                    [[50, -30, 6], [70, -30, 6], [50, -10, 6], [70, -10, 6], 'evit'], 
                    [[70, -30, 6], [90, -30, 6], [70, -10, 6], [90, -10, 6], 'evit'], 
                    [[-70, -10, 6], [-50, -10, 6], [-70, 10, 6], [-50, 10, 6], 'evit'], 
                    [[-50, -10, 6], [-30, -10, 6], [-50, 10, 6], [-30, 10, 6], 'evit'], 
                    [[-30, -10, 6], [-10, -10, 6], [-30, 10, 6], [-10, 10, 6], 'evit'], 
                    [[-10, -10, 6], [10, -10, 6], [-10, 10, 6], [10, 10, 6], 'evit'], 
                    [[10, -10, 6], [30, -10, 6], [10, 10, 6], [30, 10, 6], 'scan'], 
                    [[30, -10, 6], [50, -10, 6], [30, 10, 6], [50, 10, 6], 'evit'], 
                    [[50, -10, 6], [70, -10, 6], [50, 10, 6], [70, 10, 6], 'scan'], 
                    [[70, -10, 6], [90, -10, 6], [70, 10, 6], [90, 10, 6], 'scan'], 
                    [[-70, 10, 6], [-50, 10, 6], [-70, 30, 6], [-50, 30, 6], 'scan'], 
                    [[-50, 10, 6], [-30, 10, 6], [-50, 30, 6], [-30, 30, 6], 'scan'], 
                    [[-30, 10, 6], [-10, 10, 6], [-30, 30, 6], [-10, 30, 6], 'evit'], 
                    [[-10, 10, 6], [10, 10, 6], [-10, 30, 6], [10, 30, 6], 'scan'], 
                    [[10, 10, 6], [30, 10, 6], [10, 30, 6], [30, 30, 6], 'evit'], 
                    [[30, 10, 6], [50, 10, 6], [30, 30, 6], [50, 30, 6], 'scan'], 
                    [[50, 10, 6], [70, 10, 6], [50, 30, 6], [70, 30, 6], 'evit'], 
                    [[70, 10, 6], [90, 10, 6], [70, 30, 6], [90, 30, 6], 'scan'], 
                    [[-70, 30, 6], [-50, 30, 6], [-70, 50, 6], [-50, 50, 6], 'scan'],
                    [[-50, 30, 6], [-30, 30, 6], [-50, 50, 6], [-30, 50, 6], 'evit'], 
                    [[-30, 30, 6], [-10, 30, 6], [-30, 50, 6], [-10, 50, 6], 'scan'], 
                    [[-10, 30, 6], [10, 30, 6], [-10, 50, 6], [10, 50, 6], 'evit'], 
                    [[10, 30, 6], [30, 30, 6], [10, 50, 6], [30, 50, 6], 'scan'], 
                    [[30, 30, 6], [50, 30, 6], [30, 50, 6], [50, 50, 6], 'evit'], 
                    [[50, 30, 6], [70, 30, 6], [50, 50, 6], [70, 50, 6], 'evit'], 
                    [[70, 30, 6], [90, 30, 6], [70, 50, 6], [90, 50, 6], 'evit'], 
                    [[-70, 50, 6], [-50, 50, 6], [-70, 70, 6], [-50, 70, 6], 'evit'], 
                    [[-50, 50, 6], [-30, 50, 6], [-50, 70, 6], [-30, 70, 6], 'scan'], 
                    [[-30, 50, 6], [-10, 50, 6], [-30, 70, 6], [-10, 70, 6], 'evit'], 
                    [[-10, 50, 6], [10, 50, 6], [-10, 70, 6], [10, 70, 6], 'scan'],
                    [[10, 50, 6], [30, 50, 6], [10, 70, 6], [30, 70, 6], 'evit'], 
                    [[30, 50, 6], [50, 50, 6], [30, 70, 6], [50, 70, 6], 'scan'], 
                    [[50, 50, 6], [70, 50, 6], [50, 70, 6], [70, 70, 6], 'evit'], 
                    [[70, 50, 6], [90, 50, 6], [70, 70, 6], [90, 70, 6], 'evit'], 
                    [[-70, 70, 6], [-50, 70, 6], [-70, 90, 6], [-50, 90, 6], 'evit'],
                    [[-50, 70, 6], [-30, 70, 6], [-50, 90, 6], [-30, 90, 6], 'scan'], 
                    [[-30, 70, 6], [-10, 70, 6], [-30, 90, 6], [-10, 90, 6], 'scan'], 
                    [[-10, 70, 6], [10, 70, 6], [-10, 90, 6], [10, 90, 6], 'evit'],
                    [[10, 70, 6], [30, 70, 6], [10, 90, 6], [30, 90, 6], 'scan'],
                    [[30, 70, 6], [50, 70, 6], [30, 90, 6], [50, 90, 6], 'scan'],
                    [[50, 70, 6], [70, 70, 6], [50, 90, 6], [70, 90, 6], 'evit'],
                    [[70, 70, 6], [90, 70, 6], [70, 90, 6], [90, 90, 6], 'evit']]

coordonnes_porte = [[[-60, -70], [-70, -60], [-60, -50], [-50, -60]], 
                     [[-40, -70], [-50, -60], [-40, -50], [-30, -60]], 
                     [[-20, -70], [-30, -60], [-20, -50], [-10, -60]], 
                     [[0, -70], [-10, -60], [0, -50], [10, -60]], 
                     [[20, -70], [10, -60], [20, -50], [30, -60]],
                     [[40, -70], [30, -60], [40, -50], [50, -60]], 
                     [[60, -70], [50, -60], [60, -50], [70, -60]], 
                     [[80, -70], [70, -60], [80, -50], [90, -60]], 
                     [[-60, -50], [-70, -40], [-60, -30], [-50, -40]], 
                     [[-40, -50], [-50, -40], [-40, -30], [-30, -40]], 
                     [[-20, -50], [-30, -40], [-20, -30], [-10, -40]],
                     [[0, -50], [-10, -40], [0, -30], [10, -40]], 
                     [[20, -50], [10, -40], [20, -30], [30, -40]], 
                     [[40, -50], [30, -40], [40, -30], [50, -40]], 
                     [[60, -50], [50, -40], [60, -30], [70, -40]], 
                     [[80, -50], [70, -40], [80, -30], [90, -40]], 
                     [[-60, -30], [-70, -20], [-60, -10], [-50, -20]], 
                     [[-40, -30], [-50, -20], [-40, -10], [-30, -20]], 
                     [[-20, -30], [-30, -20], [-20, -10], [-10, -20]], 
                     [[0, -30], [-10, -20], [0, -10], [10, -20]], 
                     [[20, -30], [10, -20], [20, -10], [30, -20]], 
                     [[40, -30], [30, -20], [40, -10], [50, -20]], 
                     [[60, -30], [50, -20], [60, -10], [70, -20]], 
                     [[80, -30], [70, -20], [80, -10], [90, -20]], 
                     [[-60, -10], [-70, 0], [-60, 10], [-50, 0]], 
                     [[-40, -10], [-50, 0], [-40, 10], [-30, 0]], 
                     [[-20, -10], [-30, 0], [-20, 10], [-10, 0]], 
                     [[0, -10], [-10, 0], [0, 10], [10, 0]], 
                     [[20, -10], [10, 0], [20, 10], [30, 0]], 
                     [[40, -10], [30, 0], [40, 10], [50, 0]], 
                     [[60, -10], [50, 0], [60, 10], [70, 0]], 
                     [[80, -10], [70, 0], [80, 10], [90, 0]], 
                     [[-60, 10], [-70, 20], [-60, 30], [-50, 20]], 
                     [[-40, 10], [-50, 20], [-40, 30], [-30, 20]], 
                     [[-20, 10], [-30, 20], [-20, 30], [-10, 20]], 
                     [[0, 10], [-10, 20], [0, 30], [10, 20]], 
                     [[20, 10], [10, 20], [20, 30], [30, 20]], 
                     [[40, 10], [30, 20], [40, 30], [50, 20]], 
                     [[60, 10], [50, 20], [60, 30], [70, 20]], 
                     [[80, 10], [70, 20], [80, 30], [90, 20]], 
                     [[-60, 30], [-70, 40], [-60, 50], [-50, 40]], 
                     [[-40, 30], [-50, 40], [-40, 50], [-30, 40]], 
                     [[-20, 30], [-30, 40], [-20, 50], [-10, 40]], 
                     [[0, 30], [-10, 40], [0, 50], [10, 40]], 
                     [[20, 30], [10, 40], [20, 50], [30, 40]], 
                     [[40, 30], [30, 40], [40, 50], [50, 40]], 
                     [[60, 30], [50, 40], [60, 50], [70, 40]], 
                     [[80, 30], [70, 40], [80, 50], [90, 40]], 
                     [[-60, 50], [-70, 60], [-60, 70], [-50, 60]], 
                     [[-40, 50], [-50, 60], [-40, 70], [-30, 60]], 
                     [[-20, 50], [-30, 60], [-20, 70], [-10, 60]], 
                     [[0, 50], [-10, 60], [0, 70], [10, 60]], 
                     [[20, 50], [10, 60], [20, 70], [30, 60]], 
                     [[40, 50], [30, 60], [40, 70], [50, 60]], 
                     [[60, 50], [50, 60], [60, 70], [70, 60]], 
                     [[80, 50], [70, 60], [80, 70], [90, 60]], 
                     [[-60, 70], [-70, 80], [-60, 90], [-50, 80]], 
                     [[-40, 70], [-50, 80], [-40, 90], [-30, 80]], 
                     [[-20, 70], [-30, 80], [-20, 90], [-10, 80]], 
                     [[0, 70], [-10, 80], [0, 90], [10, 80]], 
                     [[20, 70], [10, 80], [20, 90], [30, 80]], 
                     [[40, 70], [30, 80], [40, 90], [50, 80]], 
                     [[60, 70], [50, 80], [60, 90], [70, 80]], 
                     [[80, 70], [70, 80], [80, 90], [90, 80]]]
                   
def box_type_exit(robot) :
    
    for i in range(len(coordonnes_cases)) :
        
        if coordonnes_cases[i][0][0]<= robot[0] and coordonnes_cases[i][0][1]<= robot[1] and coordonnes_cases[i][3][0]>= robot[0] and coordonnes_cases[i][3][1]>= robot[1] : 

            type=coordonnes_cases[i][4]
            sortie=[]      
        
            for c in range(len(coordonnes_porte)) :
                for p in range(len(coordonnes_porte[c])) :
                    
                    if abs(coordonnes_porte[c][p][0] - robot[0]) < 3 and abs(coordonnes_porte[c][p][1] - robot[1]) < 3 :

                        for o in range(len(coordonnes_porte[c])) :

                            sortie.append(coordonnes_porte[c][o])    
        
            return type,sortie
                      
        


# type,sortie=box_type_exit(robot)
# print("case de type :", type)
# print("les sorties/entrée disponible de cette cas sont les suivante : ",sortie)   
print(len(coordonnes_cases))
