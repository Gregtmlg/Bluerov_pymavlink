import numpy as np
import math
from matplotlib import pyplot as plt
import gym
from gym import spaces
from gym.spaces import Box, Dict, Discrete, MultiBinary, MultiDiscrete
from stable_baselines3.common.vec_env import DummyVecEnv
# from stable_baselines3.common.envs import make_vec_env



import numpy as np
import matplotlib.pyplot as plt
import random
import time
import matplotlib.pyplot as plt
import subprocess
import threading
import torch



observation_space = Dict(
            {
                #X Y Z  depart
                'pos_départ' : spaces.Box(low=float("-inf"), high=float("inf"), shape=(1,3), dtype=np.float32),
                #X Y Z arrive
                'intervention' : spaces.Box(low=float("-inf"), high=float("inf"), shape=(7,3), dtype=np.float32),
                #X Y Z ma_pos
                'pos_cur' : spaces.Box(low=float("-inf"), high=float("inf"), shape=(1,3), dtype=np.float32),
                #Niveau de batterie 
                'nivbat' : spaces.Box(low=0.0, high=1.0, shape=(1,), dtype=np.float32),
                #Incertitude de position
                'pos_error' : spaces.Box(low=0.0, high=float('inf'), shape=(1,), dtype=np.float32),
                #X Y Z des portes des zones
                'waypnt' : spaces.Box(low=float("-inf"), high=float("inf"), shape=(144, 3), dtype=np.float32),
                #data du velodymne, a determiner 
                'data_v' : spaces.Box(low=float("-inf"), high=float("inf"), shape=(50, 3), dtype=np.float32),
                # data caméra RGB : il faudra mettre le format de l'image
                'data_cam' : spaces.Box(low=0.0, high=255, shape=(10, 5, 3), dtype=np.int16)
            }
            )

action_space =  Box(low=np.array([0,0]), high=np.array([4,144]), dtype=np.uint32)
discrete_space = Discrete(6)
exemple = discrete_space.sample()
print(type(exemple))

#print(type(action_space.sample()[1]))

# subprocess.run(["~/launch_ardu_sitl.sh"], shell=False)
# print(type(action_space.sample()[1]))
# time.sleep(10)
# subprocess.call("~/kill_ardu_sitl.sh", shell=True)

# def launch_sitl():

#     subprocess.run(["~/launch_ardu_sitl.sh"], shell=True)

# def kill_sitl():
#     subprocess.run(["pkill", "mavproxy.py"], shell=True)
#     time.sleep(1)
#     subprocess.run(["pkill", "mavproxy.py"], shell=True)

# ardu_sitl=threading.Thread(name='ArduSub Sitl', target=launch_sitl)
# ardu_sitl.deamon=True
# ardu_sitl.start()

# init_array = np.array([[-70,-60,-7], [-70,-40,-7], [2,5,4], [6,8,9]])
# test = np.array([[1,2,3], [4,5,6]])
# init_array[0:2,0:3] = test
# zero = np.ones((2,3))

# if (np.array([[1,2,3]])==test).all(axis=1).any():
#     print(True)
# else:
#     print(False)

# observations_dict = {
#     'obs1': np.array([1.0, 2.0, 3.0, 4.0], dtype=np.float32),
#     'obs2': np.array([5.0, 6.0], dtype=np.float32)}

# example = observation_space.sample()
# b = torch.from_numpy(init_array)

# a = np.concatenate([obs.flatten() for obs in observations_dict.values()])

# obsc = {'pos_départ': np.array([-70,  20,  -7]), 'intervention': np.array([[ 44., -60.,  -7.],
#        [-60., -66.,  -7.],
#        [ 21., -67.,  -7.],
#        [ 26., -54.,  -7.],
#        [  3., -57.,  -7.],
#        [  5., -52.,  -7.],
#        [ -2., -65.,  -7.],
#        [-32., -63.,  -7.],
#        [-63., -41.,  -7.],
#        [-40., -38.,  -7.]]), 'pos_cur': np.array([-69.29781342,  19.81032562,   6.89279556]), 'nivbat': np.array([100.], dtype=np.float32), 'pos_error': np.array([0.5], dtype=np.float32), 'waypnt': np.array([[-60, -70,  -7],
#        [-40, -70,  -7],
#        [-20, -70,  -7],
#        [  0, -70,  -7],
#        [ 20, -70,  -7],
#        [ 40, -70,  -7],
#        [ 60, -70,  -7],
#        [ 80, -70,  -7],
#        [-70, -60,  -7],
#        [-50, -60,  -7],
#        [-30, -60,  -7],
#        [-10, -60,  -7],
#        [ 10, -60,  -7],
#        [ 30, -60,  -7],
#        [ 50, -60,  -7],
#        [ 70, -60,  -7],
#        [ 90, -60,  -7],
#        [-60, -50,  -7],
#        [-40, -50,  -7],
#        [-20, -50,  -7],
#        [  0, -50,  -7],
#        [ 20, -50,  -7],
#        [ 40, -50,  -7],
#        [ 60, -50,  -7],
#        [ 80, -50,  -7],
#        [-70, -40,  -7],
#        [-50, -40,  -7],
#        [-30, -40,  -7],
#        [-10, -40,  -7],
#        [ 10, -40,  -7],
#        [ 30, -40,  -7],
#        [ 50, -40,  -7],
#        [ 70, -40,  -7],
#        [ 90, -40,  -7],
#        [-60, -30,  -7],
#        [-40, -30,  -7],
#        [-20, -30,  -7],
#        [  0, -30,  -7],
#        [ 20, -30,  -7],
#        [ 40, -30,  -7],
#        [ 60, -30,  -7],
#        [ 80, -30,  -7],
#        [-70, -20,  -7],
#        [-50, -20,  -7],
#        [-30, -20,  -7],
#        [-10, -20,  -7],
#        [ 10, -20,  -7],
#        [ 30, -20,  -7],
#        [ 50, -20,  -7],
#        [ 70, -20,  -7],
#        [ 90, -20,  -7],
#        [-60, -10,  -7],
#        [-40, -10,  -7],
#        [-20, -10,  -7],
#        [  0, -10,  -7],
#        [ 20, -10,  -7],
#        [ 40, -10,  -7],
#        [ 60, -10,  -7],
#        [ 80, -10,  -7],
#        [-70,   0,  -7],
#        [-50,   0,  -7],
#        [-30,   0,  -7],
#        [-10,   0,  -7],
#        [ 10,   0,  -7],
#        [ 30,   0,  -7],
#        [ 50,   0,  -7],
#        [ 70,   0,  -7],
#        [ 90,   0,  -7],
#        [-60,  10,  -7],
#        [-40,  10,  -7],
#        [-20,  10,  -7],
#        [  0,  10,  -7],
#        [ 20,  10,  -7],
#        [ 40,  10,  -7],
#        [ 60,  10,  -7],
#        [ 80,  10,  -7],
#        [-70,  20,  -7],
#        [-50,  20,  -7],
#        [-30,  20,  -7],
#        [-10,  20,  -7],
#        [ 10,  20,  -7],
#        [ 30,  20,  -7],
#        [ 50,  20,  -7],
#        [ 70,  20,  -7],
#        [ 90,  20,  -7],
#        [-60,  30,  -7],
#        [-40,  30,  -7],
#        [-20,  30,  -7],
#        [  0,  30,  -7],
#        [ 20,  30,  -7],
#        [ 40,  30,  -7],
#        [ 60,  30,  -7],
#        [ 80,  30,  -7],
#        [-70,  40,  -7],
#        [-50,  40,  -7],
#        [-30,  40,  -7],
#        [-10,  40,  -7],
#        [ 10,  40,  -7],
#        [ 30,  40,  -7],
#        [ 50,  40,  -7],
#        [ 70,  40,  -7],
#        [ 90,  40,  -7],
#        [-60,  50,  -7],
#        [-40,  50,  -7],
#        [-20,  50,  -7],
#        [  0,  50,  -7],
#        [ 20,  50,  -7],
#        [ 40,  50,  -7],
#        [ 60,  50,  -7],
#        [ 80,  50,  -7],
#        [-70,  60,  -7],
#        [-50,  60,  -7],
#        [-30,  60,  -7],
#        [-10,  60,  -7],
#        [ 10,  60,  -7],
#        [ 30,  60,  -7],
#        [ 50,  60,  -7],
#        [ 70,  60,  -7],
#        [ 90,  60,  -7],
#        [-60,  70,  -7],
#        [-40,  70,  -7],
#        [-20,  70,  -7],
#        [  0,  70,  -7],
#        [ 20,  70,  -7],
#        [ 40,  70,  -7],
#        [ 60,  70,  -7],
#        [ 80,  70,  -7],
#        [-70,  80,  -7],
#        [-50,  80,  -7],
#        [-30,  80,  -7],
#        [-10,  80,  -7],
#        [ 10,  80,  -7],
#        [ 30,  80,  -7],
#        [ 50,  80,  -7],
#        [ 70,  80,  -7],
#        [ 90,  80,  -7],
#        [-60,  90,  -7],
#        [-40,  90,  -7],
#        [-20,  90,  -7],
#        [  0,  90,  -7],
#        [ 20,  90,  -7],
#        [ 40,  90,  -7],
#        [ 60,  90,  -7],
#        [ 80,  90,  -7]]), 'data_v': np.array([[1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.],
#        [1000000., 1000000., 1000000.]]), 'data_cam': np.array([[[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]],

#        [[0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.],
#         [0., 0., 0.]]])}

# c = np.concatenate([obs.flatten() for obs in obsc.values()])
# for key in obsc.keys():
#     obsc[key] = obsc[key].flatten()

# print(obsc.keys())


